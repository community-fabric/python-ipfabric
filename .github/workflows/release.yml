# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Release
on:
  push:
    branches: [ main ]

jobs:
  unittest:
    # https://github.community/t/how-do-i-specify-job-dependency-running-in-another-workflow/16482
    if: github.repository == 'community-fabric/python-ipfabric'
    concurrency: release
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Install dependencies
        run: |
          python -m pip install poetry --upgrade pip
          poetry config experimental.new-installer false
          poetry config virtualenvs.create false
          poetry install --no-interaction
      - name: Run functional tests
        env:
          IPF_URL: ${{ secrets.IPF_URL }}
          IPF_TOKEN: ${{ secrets.IPF_TOKEN }}
        run: poetry run python -m pytest tests/functional

      - name: Semantic Release
        env:
          REPOSITORY_PASSWORD: ${{ secrets.PYPI }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          REPOSITORY_USERNAME: __token__
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add requirements.txt
          semantic-release publish -v INFO -D commit_author="github-actions <action@github.com>"
  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Python Packages
        run: |
          python -m pip install poetry --upgrade pip
          poetry config experimental.new-installer false
          poetry config virtualenvs.create false
      - name: Set env
        run: echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV
      - name: Run Poetry Version
        run: poetry version $RELEASE_VERSION
      - name: Run Poetry Build
        run: poetry build
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: dist/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Push to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI }}
    needs:
      - unittest